# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  favoritePodcasts(where: PodcastWhereInput! = {}, orderBy: [PodcastOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PodcastWhereUniqueInput): [Podcast!]
  favoritePodcastsCount(where: PodcastWhereInput! = {}): Int
  createdAt: DateTime
  isAdmin: Boolean
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  favoritePodcasts: PodcastManyRelationFilter
  createdAt: DateTimeNullableFilter
  isAdmin: BooleanFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PodcastManyRelationFilter {
  every: PodcastWhereInput
  some: PodcastWhereInput
  none: PodcastWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
  isAdmin: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  favoritePodcasts: PodcastRelateToManyForUpdateInput
  createdAt: DateTime
  isAdmin: Boolean
}

input PodcastRelateToManyForUpdateInput {
  disconnect: [PodcastWhereUniqueInput!]
  set: [PodcastWhereUniqueInput!]
  create: [PodcastCreateInput!]
  connect: [PodcastWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  favoritePodcasts: PodcastRelateToManyForCreateInput
  createdAt: DateTime
  isAdmin: Boolean
}

input PodcastRelateToManyForCreateInput {
  create: [PodcastCreateInput!]
  connect: [PodcastWhereUniqueInput!]
}

type Podcast {
  id: ID!
  title: String
  audio_uri: String
  video_uri: String
  artwork: String
  lyricist: String
  category: String
  type: String
  artist: Artist
  favoritedBy(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  favoritedByCount(where: UserWhereInput! = {}): Int
  favoritedCount: Int
}

input PodcastWhereUniqueInput {
  id: ID
}

input PodcastWhereInput {
  AND: [PodcastWhereInput!]
  OR: [PodcastWhereInput!]
  NOT: [PodcastWhereInput!]
  id: IDFilter
  title: StringFilter
  audio_uri: StringFilter
  video_uri: StringFilter
  artwork: StringFilter
  lyricist: StringFilter
  category: StringFilter
  type: StringFilter
  artist: ArtistWhereInput
  favoritedBy: UserManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input PodcastOrderByInput {
  id: OrderDirection
  title: OrderDirection
  audio_uri: OrderDirection
  video_uri: OrderDirection
  artwork: OrderDirection
  lyricist: OrderDirection
  category: OrderDirection
  type: OrderDirection
}

input PodcastUpdateInput {
  title: String
  audio_uri: String
  video_uri: String
  artwork: String
  lyricist: String
  category: String
  type: String
  artist: ArtistRelateToOneForUpdateInput
  favoritedBy: UserRelateToManyForUpdateInput
}

input ArtistRelateToOneForUpdateInput {
  create: ArtistCreateInput
  connect: ArtistWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input PodcastUpdateArgs {
  where: PodcastWhereUniqueInput!
  data: PodcastUpdateInput!
}

input PodcastCreateInput {
  title: String
  audio_uri: String
  video_uri: String
  artwork: String
  lyricist: String
  category: String
  type: String
  artist: ArtistRelateToOneForCreateInput
  favoritedBy: UserRelateToManyForCreateInput
}

input ArtistRelateToOneForCreateInput {
  create: ArtistCreateInput
  connect: ArtistWhereUniqueInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Artist {
  id: ID!
  name: String
  bio: String
  photo: String
  podcasts(where: PodcastWhereInput! = {}, orderBy: [PodcastOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PodcastWhereUniqueInput): [Podcast!]
  podcastsCount(where: PodcastWhereInput! = {}): Int
}

input ArtistWhereUniqueInput {
  id: ID
}

input ArtistWhereInput {
  AND: [ArtistWhereInput!]
  OR: [ArtistWhereInput!]
  NOT: [ArtistWhereInput!]
  id: IDFilter
  name: StringFilter
  bio: StringFilter
  photo: StringFilter
  podcasts: PodcastManyRelationFilter
}

input ArtistOrderByInput {
  id: OrderDirection
  name: OrderDirection
  bio: OrderDirection
  photo: OrderDirection
}

input ArtistUpdateInput {
  name: String
  bio: String
  photo: String
  podcasts: PodcastRelateToManyForUpdateInput
}

input ArtistUpdateArgs {
  where: ArtistWhereUniqueInput!
  data: ArtistUpdateInput!
}

input ArtistCreateInput {
  name: String
  bio: String
  photo: String
  podcasts: PodcastRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPodcast(data: PodcastCreateInput!): Podcast
  createPodcasts(data: [PodcastCreateInput!]!): [Podcast]
  updatePodcast(where: PodcastWhereUniqueInput!, data: PodcastUpdateInput!): Podcast
  updatePodcasts(data: [PodcastUpdateArgs!]!): [Podcast]
  deletePodcast(where: PodcastWhereUniqueInput!): Podcast
  deletePodcasts(where: [PodcastWhereUniqueInput!]!): [Podcast]
  createArtist(data: ArtistCreateInput!): Artist
  createArtists(data: [ArtistCreateInput!]!): [Artist]
  updateArtist(where: ArtistWhereUniqueInput!, data: ArtistUpdateInput!): Artist
  updateArtists(data: [ArtistUpdateArgs!]!): [Artist]
  deleteArtist(where: ArtistWhereUniqueInput!): Artist
  deleteArtists(where: [ArtistWhereUniqueInput!]!): [Artist]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  registerUser(name: String!, email: String!, password: String!): RegisterResponse
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  podcasts(where: PodcastWhereInput! = {}, orderBy: [PodcastOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PodcastWhereUniqueInput): [Podcast!]
  podcast(where: PodcastWhereUniqueInput!): Podcast
  podcastsCount(where: PodcastWhereInput! = {}): Int
  artists(where: ArtistWhereInput! = {}, orderBy: [ArtistOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ArtistWhereUniqueInput): [Artist!]
  artist(where: ArtistWhereUniqueInput!): Artist
  artistsCount(where: ArtistWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  getRecommendedPodcasts(userId: ID!): [PodcastRecommendation]
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

type RegisterResponse {
  user: User
}

type PodcastRecommendation {
  id: ID!
  title: String!
  category: String!
  video_uri: String
  artwork: String
  lyricist: String
  type: String!
  audio_uri: String
  artist: ArtistInfo
  isFavourite: Boolean!
}

type ArtistInfo {
  id: ID!
  name: String!
  bio: String
  photo: String
}
